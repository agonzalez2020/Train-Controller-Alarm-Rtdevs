<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>
//Global Clock
clock T;

const int N = 6;         // # trains
typedef int[0,N-1] id_t;

chan appr[N], stop[N], leave[N];
urgent chan urgent_channel ,go[N];
broadcast chan alarm, alarm_on, alarm_off;

chan priority appr, stop, leave, go , alarm_on &lt; urgent_channel;

int trains_in_system=0;
bool decompressing_area=false;
bool start = false;
bool input_enabled=true;</declaration>
	<template>
		<name>Urgent_Channel</name>
		<location id="id0" x="0" y="-8">
		</location>
		<init ref="id0"/>
		<transition id="id1">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-59" y="-93">urgent_channel!</label>
			<nail x="-85" y="-68"/>
			<nail x="76" y="-68"/>
		</transition>
	</template>
	<template>
		<name>Alarm</name>
		<declaration>clock y;</declaration>
		<location id="id2" x="-459" y="-8">
			<name x="-468" y="8">Off</name>
		</location>
		<location id="id3" x="-161" y="-119">
			<name x="-178" y="-145">Warning</name>
			<label kind="invariant" x="-152" y="-111">y&lt;=7</label>
		</location>
		<location id="id4" x="-85" y="68">
			<name x="-93" y="85">Danger</name>
			<label kind="invariant" x="-68" y="68">y&lt;=7</label>
		</location>
		<location id="id5" x="-314" y="110">
			<name x="-365" y="102">Howl</name>
			<label kind="invariant" x="-297" y="110">y&lt;=3</label>
		</location>
		<location id="id6" x="-187" y="-8">
			<name x="-221" y="-42">On_Off</name>
		</location>
		<init ref="id2"/>
		<transition id="id7">
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="guard" x="-467" y="34">trains_in_system&lt;3</label>
			<nail x="-399" y="85"/>
		</transition>
		<transition id="id8">
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="guard" x="-314" y="59">y==3</label>
			<nail x="-280" y="76"/>
		</transition>
		<transition id="id9">
			<source ref="id6"/>
			<target ref="id2"/>
			<label kind="guard" x="-382" y="-25">!decompressing_area</label>
			<label kind="synchronisation" x="-331" y="-42">alarm_off!</label>
			<label kind="assignment" x="-408" y="-8">input_enabled=true</label>
		</transition>
		<transition id="id10">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-187" y="85">y==7</label>
			<label kind="assignment" x="-229" y="93">y=0</label>
		</transition>
		<transition id="id11">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-374" y="-136">trains_in_system&lt;3</label>
			<nail x="-459" y="-119"/>
		</transition>
		<transition id="id12">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-110" y="-17">y&gt;=2</label>
			<label kind="synchronisation" x="-212" y="-68">alarm_on!</label>
			<label kind="assignment" x="-127" y="-76">y=0, 
input_enabled=false</label>
		</transition>
		<transition id="id13">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-408" y="-102">trains_in_system&gt;=3</label>
			<label kind="synchronisation" x="-365" y="-76">alarm?</label>
			<label kind="assignment" x="-391" y="-59">y=0</label>
		</transition>
	</template>
	<template>
		<name x="40" y="16">Train</name>
		<parameter>const id_t id</parameter>
		<declaration>clock x;</declaration>
		<location id="id14" x="-688" y="-535">
			<name x="-679" y="-560">Safe</name>
		</location>
		<location id="id15" x="-487" y="-299">
			<name x="-476" y="-296">Stop</name>
		</location>
		<location id="id16" x="-408" y="-535">
			<name x="-392" y="-551">Cross</name>
			<label kind="invariant" x="-392" y="-535">x&lt;=5</label>
		</location>
		<location id="id17" x="-567" y="-387">
			<name x="-552" y="-390">Appr</name>
			<label kind="invariant" x="-610" y="-370">x&lt;=20</label>
		</location>
		<location id="id18" x="-407" y="-387">
			<name x="-391" y="-403">Start</name>
			<label kind="invariant" x="-391" y="-387">x&lt;= 15</label>
		</location>
		<location id="id19" x="-686" y="-387">
			<name x="-688" y="-373">Talarm</name>
			<committed/>
		</location>
		<init ref="id14"/>
		<transition id="id20">
			<source ref="id19"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-652" y="-404">alarm!</label>
		</transition>
		<transition id="id21">
			<source ref="id14"/>
			<target ref="id19"/>
			<label kind="guard" x="-686" y="-447">input_enabled</label>
			<label kind="synchronisation" x="-688" y="-475">appr[id]!</label>
			<label kind="assignment" x="-686" y="-498">x=0</label>
		</transition>
		<transition id="id22">
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="guard" x="-493" y="-458">x&gt;=10</label>
			<label kind="assignment" x="-510" y="-441">x=0</label>
		</transition>
		<transition id="id23">
			<source ref="id17"/>
			<target ref="id15"/>
			<label kind="guard" x="-575" y="-339">x&lt;=10</label>
			<label kind="synchronisation" x="-575" y="-323">stop[id]?</label>
		</transition>
		<transition id="id24">
			<source ref="id16"/>
			<target ref="id14"/>
			<label kind="guard" x="-569" y="-535">x&gt;=3</label>
			<label kind="synchronisation" x="-578" y="-552">leave[id]!</label>
		</transition>
		<transition id="id25">
			<source ref="id18"/>
			<target ref="id16"/>
			<label kind="guard" x="-400" y="-475">x&gt;=7</label>
			<label kind="assignment" x="-400" y="-458">x=0</label>
		</transition>
		<transition id="id26">
			<source ref="id15"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="-442" y="-348">go[id]?</label>
			<label kind="assignment" x="-442" y="-331">x=0</label>
		</transition>
	</template>
	<template>
		<name x="40" y="16">Gate</name>
		<declaration>id_t list[N+1];
int[0,N] len;

// Put an element at the end of the queue
void enqueue(id_t element)
{
        list[len++] = element;
        trains_in_system++;
        if (input_enabled &amp;&amp; (trains_in_system==N)) {
            input_enabled=false;
            decompressing_area=true;
        }

}

// Remove the front element of the queue
void dequeue()
{
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;

        if ((not input_enabled) &amp;&amp; (trains_in_system==0)) {
            input_enabled=true;
            decompressing_area=false;
        }

        trains_in_system--;
}

// Returns the front element of the queue
id_t front()
{
   return list[0];
}

// Returns the last element of the queue
id_t tail()
{
   return list[len - 1];
}</declaration>
		<location id="id27" x="192" y="360">
			<committed/>
		</location>
		<location id="id28" x="192" y="264">
			<name x="208" y="264">Occ</name>
		</location>
		<location id="id29" x="192" y="128">
			<name x="208" y="96">Free</name>
		</location>
		<init ref="id29"/>
		<transition id="id30">
			<source ref="id28"/>
			<target ref="id27"/>
			<label kind="select" x="104" y="288">e : id_t</label>
			<label kind="synchronisation" x="104" y="304">appr[e]?</label>
			<label kind="assignment" x="104" y="320">enqueue(e)</label>
		</transition>
		<transition id="id31">
			<source ref="id28"/>
			<target ref="id29"/>
			<label kind="select" x="296" y="152">e : id_t</label>
			<label kind="guard" x="296" y="168">e == front()</label>
			<label kind="synchronisation" x="296" y="184">leave[e]?</label>
			<label kind="assignment" x="296" y="200">dequeue()</label>
			<nail x="288" y="264"/>
			<nail x="288" y="128"/>
		</transition>
		<transition id="id32">
			<source ref="id27"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="224" y="304">stop[tail()]!</label>
			<nail x="216" y="312"/>
		</transition>
		<transition id="id33">
			<source ref="id29"/>
			<target ref="id28"/>
			<label kind="guard" x="104" y="168">len &gt; 0</label>
			<label kind="synchronisation" x="104" y="184">go[front()]!</label>
			<nail x="96" y="128"/>
			<nail x="96" y="264"/>
		</transition>
		<transition id="id34">
			<source ref="id29"/>
			<target ref="id28"/>
			<label kind="select" x="200" y="152">e : id_t</label>
			<label kind="guard" x="200" y="168">len == 0</label>
			<label kind="synchronisation" x="200" y="184">appr[e]?</label>
			<label kind="assignment" x="200" y="200">enqueue(e)</label>
		</transition>
	</template>
	<template>
		<name>TimeBounded_Response</name>
		<parameter>const int k</parameter>
		<declaration>clock x;

bool P() {return trains_in_system==N;}
bool Q() {return trains_in_system==0;}
</declaration>
		<location id="id35" x="-297" y="-42">
			<name x="-314" y="-68">A</name>
		</location>
		<location id="id36" x="-136" y="-42">
			<name x="-170" y="-68">A_B</name>
		</location>
		<location id="id37" x="-34" y="-127">
			<name x="-51" y="-153">B</name>
			<label kind="invariant" x="-25" y="-119">0&lt;x &amp;&amp; x&lt;=k</label>
		</location>
		<location id="id38" x="-34" y="34">
			<name x="-44" y="0">Error</name>
		</location>
		<location id="id39" x="-34" y="-42">
			<name x="-17" y="-51">C</name>
		</location>
		<init ref="id35"/>
		<transition id="id40">
			<source ref="id37"/>
			<target ref="id39"/>
		</transition>
		<transition id="id41">
			<source ref="id36"/>
			<target ref="id38"/>
			<label kind="guard" x="-229" y="8">x==0 &amp;&amp; Q()</label>
			<nail x="-136" y="34"/>
		</transition>
		<transition id="id42">
			<source ref="id36"/>
			<target ref="id38"/>
			<label kind="guard" x="-93" y="-25">x&gt;k</label>
		</transition>
		<transition id="id43">
			<source ref="id36"/>
			<target ref="id37"/>
			<label kind="guard" x="-85" y="-85">Q()</label>
			<label kind="synchronisation" x="-195" y="-102">urgent_channel?</label>
		</transition>
		<transition id="id44">
			<source ref="id35"/>
			<target ref="id36"/>
			<label kind="guard" x="-212" y="-42">P()</label>
			<label kind="assignment" x="-255" y="-42">x=0</label>
		</transition>
	</template>
	<template>
		<name>TA_tb_3</name>
		<declaration>clock x;

bool P() {return trains_in_system==N;}
bool Q() {return trains_in_system==0;}
</declaration>
		<location id="id45" x="-187" y="-17">
			<name x="-196" y="-43">A</name>
		</location>
		<location id="id46" x="-34" y="-17">
			<name x="-44" y="-51">A_B</name>
			<committed/>
		</location>
		<location id="id47" x="60" y="59">
			<name x="50" y="25">Error</name>
		</location>
		<init ref="id45"/>
		<transition id="id48">
			<source ref="id46"/>
			<target ref="id47"/>
			<label kind="guard" x="-59" y="25">Q()</label>
			<nail x="-34" y="59"/>
		</transition>
		<transition id="id49">
			<source ref="id45"/>
			<target ref="id46"/>
			<label kind="guard" x="-102" y="-17">P()</label>
			<label kind="assignment" x="-144" y="-17">x=0</label>
		</transition>
	</template>
	<template>
		<name>TA_tb_4</name>
		<parameter>const int kmax</parameter>
		<declaration>clock x;

bool P() {return trains_in_system==N;}
bool Q() {return trains_in_system==0;}
</declaration>
		<location id="id50" x="-204" y="-42">
			<name x="-213" y="-76">A</name>
		</location>
		<location id="id51" x="-51" y="-42">
			<name x="-61" y="-76">A_B</name>
		</location>
		<location id="id52" x="51" y="42">
			<name x="34" y="8">Error</name>
		</location>
		<init ref="id50"/>
		<transition id="id53">
			<source ref="id51"/>
			<target ref="id52"/>
			<label kind="guard" x="-8" y="-25">x&lt;=kmax &amp;&amp; Q()</label>
		</transition>
		<transition id="id54">
			<source ref="id50"/>
			<target ref="id51"/>
			<label kind="guard" x="-119" y="-42">P()</label>
			<label kind="assignment" x="-161" y="-42">x=0</label>
		</transition>
	</template>
	<template>
		<name>Conditional_Security</name>
		<parameter>const int k</parameter>
		<declaration>clock x;
int current_num=0;

void Update() {current_num=trains_in_system;} 

// El prepdicado P del patrón es implementado con un canal.
bool Q() {return trains_in_system &lt;= current_num;}

</declaration>
		<location id="id55" x="-153" y="-8">
			<committed/>
		</location>
		<location id="id56" x="-42" y="110">
			<name x="-34" y="85">Error</name>
		</location>
		<location id="id57" x="-42" y="-8">
			<name x="-59" y="-34">B</name>
		</location>
		<location id="id58" x="-331" y="-8">
			<name x="-322" y="-34">A</name>
		</location>
		<location id="id59" x="76" y="-8">
			<name x="51" y="-34">C</name>
		</location>
		<init ref="id58"/>
		<transition id="id60">
			<source ref="id57"/>
			<target ref="id59"/>
			<label kind="guard" x="8" y="-25">x&gt;k</label>
		</transition>
		<transition id="id61">
			<source ref="id55"/>
			<target ref="id56"/>
			<label kind="guard" x="-212" y="59">not Q()</label>
			<nail x="-153" y="110"/>
		</transition>
		<transition id="id62">
			<source ref="id57"/>
			<target ref="id56"/>
			<label kind="guard" x="-110" y="42">x&lt;=k &amp;&amp; 
not Q()</label>
		</transition>
		<transition id="id63">
			<source ref="id55"/>
			<target ref="id57"/>
			<label kind="guard" x="-110" y="-8">Q()</label>
		</transition>
		<transition id="id64">
			<source ref="id58"/>
			<target ref="id55"/>
			<label kind="synchronisation" x="-280" y="-25">alarm_on?</label>
			<label kind="assignment" x="-297" y="-8">x=0, Update()</label>
		</transition>
	</template>
	<template>
		<name>TA_cs_2</name>
		<parameter>const int k</parameter>
		<declaration>clock x;
int cont = 0;
int current_num=0;

void Update() {current_num=trains_in_system;} 

bool Q() {return trains_in_system &lt;= current_num;}

</declaration>
		<location id="id65" x="-348" y="-42">
			<name x="-348" y="-76">A</name>
		</location>
		<location id="id66" x="-187" y="-42">
			<committed/>
		</location>
		<location id="id67" x="-76" y="-42">
			<name x="-93" y="-68">B</name>
		</location>
		<location id="id68" x="68" y="-42">
			<name x="42" y="-68">C</name>
		</location>
		<location id="id69" x="-76" y="76">
			<name x="-68" y="51">Error</name>
		</location>
		<init ref="id65"/>
		<transition id="id70">
			<source ref="id69"/>
			<target ref="id67"/>
			<label kind="guard" x="-8" y="-8">x&lt;=k &amp;&amp; Q()</label>
			<label kind="assignment" x="25" y="25">cont++</label>
			<nail x="68" y="76"/>
		</transition>
		<transition id="id71">
			<source ref="id67"/>
			<target ref="id68"/>
			<label kind="guard" x="-17" y="-59">x&gt;k</label>
		</transition>
		<transition id="id72">
			<source ref="id67"/>
			<target ref="id69"/>
			<label kind="guard" x="-144" y="0">x&lt;=k &amp;&amp;
not Q()</label>
		</transition>
		<transition id="id73">
			<source ref="id66"/>
			<target ref="id67"/>
			<label kind="guard" x="-136" y="-42">Q()</label>
		</transition>
		<transition id="id74">
			<source ref="id65"/>
			<target ref="id66"/>
			<label kind="synchronisation" x="-306" y="-59">alarm_on?</label>
			<label kind="assignment" x="-323" y="-42">x=0, Update()</label>
		</transition>
	</template>
	<template>
		<name>TA_cs_3</name>
		<parameter>const int k, const int inf</parameter>
		<declaration>clock x;
int current_num=0;

void Update() {current_num=trains_in_system;} 

bool Q() {return trains_in_system &lt;= current_num;}

</declaration>
		<location id="id75" x="-76" y="68">
			<name x="-68" y="43">C</name>
			<label kind="invariant" x="-119" y="77">x&lt;=k &amp;&amp; not Q()</label>
		</location>
		<location id="id76" x="-76" y="-42">
			<name x="-93" y="-76">B</name>
		</location>
		<location id="id77" x="-365" y="-42">
			<name x="-374" y="-76">A</name>
		</location>
		<location id="id78" x="-195" y="-42">
			<committed/>
		</location>
		<location id="id79" x="8" y="-42">
			<name x="-8" y="-76">D</name>
		</location>
		<init ref="id77"/>
		<transition id="id80">
			<source ref="id75"/>
			<target ref="id79"/>
			<label kind="guard" x="8" y="0">x==k</label>
			<nail x="8" y="68"/>
		</transition>
		<transition id="id81">
			<source ref="id76"/>
			<target ref="id75"/>
			<label kind="guard" x="-153" y="0">x&lt;=inf &amp;&amp;
not Q()</label>
		</transition>
		<transition id="id82">
			<source ref="id78"/>
			<target ref="id76"/>
			<label kind="guard" x="-136" y="-42">Q()</label>
		</transition>
		<transition id="id83">
			<source ref="id77"/>
			<target ref="id78"/>
			<label kind="synchronisation" x="-314" y="-59">alarm_on?</label>
			<label kind="assignment" x="-331" y="-42">x=0, Update()</label>
		</transition>
	</template>
	<template>
		<name>TA_cs_4</name>
		<parameter>const int k, const int inf</parameter>
		<declaration>clock x;
int current_num=0;

void Update() {
//current_num=trains_in_system;
current_num=3; //Error introducido para Verificar este mutante
} 

bool Q() {return trains_in_system &lt;= current_num;}


</declaration>
		<location id="id84" x="68" y="59">
			<name x="59" y="25">C</name>
			<label kind="invariant" x="25" y="68">x&lt;=k &amp;&amp; Q()</label>
		</location>
		<location id="id85" x="-119" y="59">
			<name x="-137" y="25">B</name>
		</location>
		<location id="id86" x="-289" y="-59">
			<name x="-298" y="-93">A</name>
		</location>
		<location id="id87" x="-119" y="-59">
			<committed/>
		</location>
		<location id="id88" x="118" y="-59">
			<name x="102" y="-93">D</name>
		</location>
		<init ref="id86"/>
		<transition id="id89">
			<source ref="id84"/>
			<target ref="id88"/>
			<label kind="guard" x="119" y="-8">x==k</label>
			<nail x="119" y="59"/>
		</transition>
		<transition id="id90">
			<source ref="id85"/>
			<target ref="id84"/>
			<label kind="guard" x="-85" y="42">Q() &amp;&amp; x&lt;=inf</label>
		</transition>
		<transition id="id91">
			<source ref="id87"/>
			<target ref="id85"/>
			<label kind="guard" x="-178" y="-8">not Q()</label>
		</transition>
		<transition id="id92">
			<source ref="id86"/>
			<target ref="id87"/>
			<label kind="synchronisation" x="-246" y="-76">alarm_on?</label>
			<label kind="assignment" x="-255" y="-59">x=0, Update()</label>
		</transition>
	</template>
	<template>
		<name>TimeRestricted_Precedence</name>
		<parameter>const int k</parameter>
		<declaration>clock x;
bool Ocurred_P=false;

bool P() {return trains_in_system&gt;=3;}</declaration>
		<location id="id93" x="-484" y="-255">
			<name x="-494" y="-289">A</name>
		</location>
		<location id="id94" x="-229" y="-255">
			<name x="-239" y="-289">B</name>
			<label kind="invariant" x="-272" y="-246">x&lt;=k</label>
		</location>
		<location id="id95" x="-59" y="-255">
			<name x="-69" y="-289">C</name>
			<label kind="invariant" x="-51" y="-247">x&lt;=k</label>
		</location>
		<location id="id96" x="-484" y="-145">
			<name x="-467" y="-154">Error</name>
		</location>
		<init ref="id93"/>
		<transition id="id97">
			<source ref="id93"/>
			<target ref="id96"/>
			<label kind="guard" x="-637" y="-205">not Ocurred_P</label>
			<label kind="synchronisation" x="-603" y="-230">alarm_on?</label>
			<nail x="-526" y="-255"/>
			<nail x="-526" y="-145"/>
		</transition>
		<transition id="id98">
			<source ref="id95"/>
			<target ref="id93"/>
			<label kind="guard" x="-297" y="-357">x==k</label>
			<nail x="-59" y="-340"/>
			<nail x="-484" y="-340"/>
		</transition>
		<transition id="id99">
			<source ref="id94"/>
			<target ref="id93"/>
			<label kind="guard" x="-356" y="-323">x==k &amp;&amp; P()</label>
			<nail x="-229" y="-306"/>
			<nail x="-450" y="-306"/>
		</transition>
		<transition id="id100">
			<source ref="id95"/>
			<target ref="id94"/>
			<label kind="guard" x="-195" y="-179">P()</label>
			<label kind="synchronisation" x="-211" y="-196">urgent_channel?</label>
			<label kind="assignment" x="-152" y="-179">x=0</label>
			<nail x="-59" y="-179"/>
			<nail x="-229" y="-179"/>
		</transition>
		<transition id="id101">
			<source ref="id93"/>
			<target ref="id96"/>
			<label kind="guard" x="-484" y="-196">x&gt;k</label>
			<label kind="synchronisation" x="-484" y="-221">alarm_on?</label>
		</transition>
		<transition id="id102">
			<source ref="id94"/>
			<target ref="id95"/>
			<label kind="guard" x="-178" y="-272">not P()</label>
			<label kind="synchronisation" x="-203" y="-255">urgent_channel?</label>
		</transition>
		<transition id="id103">
			<source ref="id93"/>
			<target ref="id94"/>
			<label kind="guard" x="-297" y="-272">P()</label>
			<label kind="synchronisation" x="-441" y="-272">urgent_channel?</label>
			<label kind="assignment" x="-433" y="-255">x=0, Ocurred_P=true</label>
		</transition>
	</template>
	<template>
		<name>TA_trp_2</name>
		<parameter>const int k</parameter>
		<declaration>clock x;
bool Ocurred_P=false;

bool P() {return trains_in_system&gt;=3;}</declaration>
		<location id="id104" x="-450" y="-357">
			<name x="-458" y="-391">A</name>
		</location>
		<location id="id105" x="-271" y="-357">
			<name x="-254" y="-366">Error</name>
		</location>
		<init ref="id104"/>
		<transition id="id106">
			<source ref="id104"/>
			<target ref="id104"/>
			<label kind="guard" x="-552" y="-365">P()</label>
			<label kind="synchronisation" x="-688" y="-391">urgent_channel?</label>
			<label kind="assignment" x="-680" y="-365">Ocurred_P=true</label>
			<nail x="-560" y="-399"/>
			<nail x="-560" y="-314"/>
		</transition>
		<transition id="id107">
			<source ref="id104"/>
			<target ref="id105"/>
			<label kind="guard" x="-416" y="-357">not Ocurred_P</label>
			<label kind="synchronisation" x="-399" y="-374">alarm_on?</label>
			<nail x="-416" y="-357"/>
		</transition>
	</template>
	<template>
		<name>Precedence_with_Delay</name>
		<parameter>const int k</parameter>
		<declaration>clock x;
bool Ocurred_P=false;

bool P() {return true;}
bool Q() {return true;}</declaration>
		<location id="id108" x="-306" y="-25">
			<name x="-323" y="-51">A</name>
		</location>
		<location id="id109" x="-76" y="-25">
			<name x="-68" y="-17">B</name>
			<label kind="invariant" x="-68" y="-51">x&lt;=k+1</label>
		</location>
		<location id="id110" x="136" y="-25">
			<name x="119" y="-51">C</name>
			<label kind="invariant" x="144" y="-51">x&lt;=k+1</label>
		</location>
		<location id="id111" x="-306" y="93">
			<name x="-323" y="110">Error</name>
		</location>
		<init ref="id108"/>
		<transition id="id112">
			<source ref="id110"/>
			<target ref="id111"/>
			<label kind="guard" x="-127" y="93">x&lt;=k &amp;&amp; Q()</label>
			<nail x="136" y="93"/>
		</transition>
		<transition id="id113">
			<source ref="id109"/>
			<target ref="id111"/>
			<label kind="guard" x="-212" y="42">x&lt;=k &amp;&amp; Q()</label>
		</transition>
		<transition id="id114">
			<source ref="id110"/>
			<target ref="id108"/>
			<label kind="guard" x="-101" y="-127">x&gt;k</label>
			<nail x="136" y="-110"/>
			<nail x="-306" y="-110"/>
		</transition>
		<transition id="id115">
			<source ref="id109"/>
			<target ref="id108"/>
			<label kind="guard" x="-195" y="-93">x&gt;k</label>
			<nail x="-76" y="-76"/>
			<nail x="-263" y="-76"/>
		</transition>
		<transition id="id116">
			<source ref="id110"/>
			<target ref="id109"/>
			<label kind="guard" x="-25" y="51">P()</label>
			<label kind="synchronisation" x="-42" y="34">urgent_channel?</label>
			<label kind="assignment" x="17" y="51">x=0</label>
			<nail x="93" y="51"/>
			<nail x="-76" y="51"/>
		</transition>
		<transition id="id117">
			<source ref="id108"/>
			<target ref="id111"/>
			<label kind="guard" x="-306" y="0">Q() &amp;&amp; 
not Ocurred_P</label>
			<nail x="-306" y="34"/>
		</transition>
		<transition id="id118">
			<source ref="id109"/>
			<target ref="id110"/>
			<label kind="guard" x="8" y="-42">not P()</label>
			<label kind="synchronisation" x="-25" y="-25">urgent_channel?</label>
		</transition>
		<transition id="id119">
			<source ref="id108"/>
			<target ref="id109"/>
			<label kind="guard" x="-136" y="-42">P()</label>
			<label kind="synchronisation" x="-272" y="-42">urgent_channel?</label>
			<label kind="assignment" x="-272" y="-25">x=0, Ocurred_P=true</label>
		</transition>
	</template>
	<template>
		<name>TimeBounded_Frequency</name>
		<parameter>const int k</parameter>
		<declaration>clock x;
int cont=0;

bool P() {return true;}


</declaration>
		<location id="id120" x="-348" y="-42">
			<name x="-358" y="-76">A</name>
		</location>
		<location id="id121" x="-136" y="-42">
			<name x="-146" y="-76">B</name>
			<label kind="invariant" x="-178" y="-25">x&lt;=k</label>
		</location>
		<location id="id122" x="42" y="-42">
			<name x="32" y="-76">C</name>
			<label kind="invariant" x="50" y="-34">x&lt;=k</label>
		</location>
		<location id="id123" x="-348" y="42">
			<name x="-331" y="33">Error</name>
		</location>
		<init ref="id120"/>
		<transition id="id124">
			<source ref="id122"/>
			<target ref="id120"/>
			<label kind="guard" x="-161" y="-144">x==k</label>
			<nail x="42" y="-127"/>
			<nail x="-348" y="-127"/>
		</transition>
		<transition id="id125">
			<source ref="id121"/>
			<target ref="id120"/>
			<label kind="guard" x="-272" y="-110">x==k &amp;&amp; P()</label>
			<nail x="-136" y="-93"/>
			<nail x="-306" y="-93"/>
		</transition>
		<transition id="id126">
			<source ref="id122"/>
			<target ref="id121"/>
			<label kind="guard" x="-93" y="34">P()</label>
			<label kind="synchronisation" x="-110" y="17">urgent_channel?</label>
			<label kind="assignment" x="-34" y="34">x=0</label>
			<nail x="42" y="34"/>
			<nail x="-136" y="34"/>
		</transition>
		<transition id="id127">
			<source ref="id120"/>
			<target ref="id123"/>
			<label kind="guard" x="-348" y="-8">x&gt;k &amp;&amp; not P() &amp;&amp; start</label>
		</transition>
		<transition id="id128">
			<source ref="id121"/>
			<target ref="id122"/>
			<label kind="guard" x="-85" y="-59">not P()</label>
			<label kind="synchronisation" x="-110" y="-42">urgent_channel?</label>
			<label kind="assignment" x="-85" y="-25">cont++</label>
		</transition>
		<transition id="id129">
			<source ref="id120"/>
			<target ref="id121"/>
			<label kind="guard" x="-221" y="-42">P()</label>
			<label kind="synchronisation" x="-297" y="-59">urgent_channel?</label>
			<label kind="assignment" x="-280" y="-42">x=0</label>
		</transition>
	</template>
	<template>
		<name>TimeConstant_Frequency</name>
		<parameter>const int k</parameter>
		<declaration>clock x;

bool P() {return true;}</declaration>
		<location id="id130" x="-204" y="-25">
			<name x="-213" y="-51">A</name>
		</location>
		<location id="id131" x="-42" y="-25">
			<name x="-76" y="-51">A_B</name>
		</location>
		<location id="id132" x="76" y="-110">
			<name x="66" y="-144">B</name>
			<label kind="invariant" x="66" y="-93">x&lt;=k &amp;&amp; x&gt;=k</label>
			<committed/>
		</location>
		<location id="id133" x="-41" y="85">
			<name x="-102" y="76">Error</name>
		</location>
		<init ref="id130"/>
		<transition id="id134">
			<source ref="id131"/>
			<target ref="id133"/>
			<label kind="guard" x="42" y="25">x&gt;k</label>
			<nail x="42" y="-25"/>
			<nail x="42" y="85"/>
		</transition>
		<transition id="id135">
			<source ref="id132"/>
			<target ref="id131"/>
			<label kind="assignment" x="-8" y="-127">x=0</label>
			<nail x="-42" y="-110"/>
		</transition>
		<transition id="id136">
			<source ref="id131"/>
			<target ref="id133"/>
			<label kind="guard" x="-204" y="25">(x&gt;0 &amp;&amp; x&lt;k &amp;&amp; P())</label>
		</transition>
		<transition id="id137">
			<source ref="id131"/>
			<target ref="id132"/>
			<label kind="guard" x="0" y="-93">P()</label>
			<label kind="synchronisation" x="8" y="-68">urgent_channel?</label>
		</transition>
		<transition id="id138">
			<source ref="id130"/>
			<target ref="id131"/>
			<label kind="guard" x="-119" y="-25">P()</label>
			<label kind="assignment" x="-161" y="-25">x=0</label>
		</transition>
	</template>
	<template>
		<name>TimeRestricted_Disable</name>
		<parameter>const int k</parameter>
		<declaration>clock x;

bool P() {return true;}
bool Q() {return true;}


</declaration>
		<location id="id139" x="-297" y="0">
			<name x="-314" y="-25">A</name>
		</location>
		<location id="id140" x="-25" y="0">
			<name x="-51" y="-25">A_B</name>
		</location>
		<location id="id141" x="85" y="-127">
			<name x="68" y="-153">B</name>
			<label kind="invariant" x="102" y="-136">x&lt;=k</label>
		</location>
		<location id="id142" x="-25" y="110">
			<name x="-85" y="102">Error</name>
		</location>
		<location id="id143" x="85" y="-42">
			<name x="102" y="-51">C</name>
		</location>
		<location id="id144" x="-161" y="0">
			<committed/>
		</location>
		<init ref="id139"/>
		<transition id="id145">
			<source ref="id140"/>
			<target ref="id142"/>
			<label kind="guard" x="34" y="34">(x&lt;=k &amp;&amp; ((not P() &amp;&amp; not Q()) 
|| (P() &amp;&amp; Q())))</label>
			<nail x="34" y="0"/>
			<nail x="34" y="110"/>
		</transition>
		<transition id="id146">
			<source ref="id144"/>
			<target ref="id142"/>
			<label kind="guard" x="-119" y="51">Q()</label>
		</transition>
		<transition id="id147">
			<source ref="id144"/>
			<target ref="id140"/>
			<label kind="guard" x="-119" y="-17">not Q()</label>
		</transition>
		<transition id="id148">
			<source ref="id139"/>
			<target ref="id144"/>
			<label kind="guard" x="-255" y="-17">P()</label>
			<label kind="assignment" x="-255" y="0">x=0</label>
		</transition>
		<transition id="id149">
			<source ref="id141"/>
			<target ref="id143"/>
		</transition>
		<transition id="id150">
			<source ref="id140"/>
			<target ref="id142"/>
			<label kind="guard" x="-25" y="42">x&gt;k</label>
		</transition>
		<transition id="id151">
			<source ref="id140"/>
			<target ref="id141"/>
			<label kind="guard" x="-59" y="-102">Q() &amp;&amp; not P()</label>
			<label kind="synchronisation" x="-93" y="-76">urgent_channel?</label>
		</transition>
	</template>
	<template>
		<name>TimeBounded_Security</name>
		<parameter>const int k</parameter>
		<declaration>clock x;

bool Start(){return true;}
bool Q() {return trains_in_system &lt;= N;}




</declaration>
		<location id="id152" x="170" y="-17">
			<name x="144" y="-42">C</name>
		</location>
		<location id="id153" x="-85" y="-17">
			<committed/>
		</location>
		<location id="id154" x="42" y="101">
			<name x="51" y="76">Error</name>
		</location>
		<location id="id155" x="42" y="-17">
			<name x="17" y="-42">B</name>
		</location>
		<location id="id156" x="-229" y="-17">
			<name x="-246" y="-42">A</name>
		</location>
		<init ref="id156"/>
		<transition id="id157">
			<source ref="id153"/>
			<target ref="id154"/>
			<label kind="guard" x="-34" y="85">Q()</label>
			<nail x="-85" y="102"/>
		</transition>
		<transition id="id158">
			<source ref="id155"/>
			<target ref="id152"/>
			<label kind="guard" x="93" y="-34">x&gt;k</label>
		</transition>
		<transition id="id159">
			<source ref="id155"/>
			<target ref="id154"/>
			<label kind="guard" x="42" y="34">x&lt;=k &amp;&amp; Q()</label>
		</transition>
		<transition id="id160">
			<source ref="id153"/>
			<target ref="id155"/>
			<label kind="guard" x="-51" y="-17">not Q()</label>
		</transition>
		<transition id="id161">
			<source ref="id156"/>
			<target ref="id153"/>
			<label kind="guard" x="-187" y="-34">Start()</label>
			<label kind="assignment" x="-170" y="-17">x=0</label>
		</transition>
	</template>
	<system>/* Time-Bounded Response: */

const int interval_tbr=122;
_TB_Response=TimeBounded_Response(interval_tbr);

//Mutant 1:
/* Would hold with a larger k?.*/
const int ext_interval=4;
_TA_tb_1=TimeBounded_Response(interval_tbr+ext_interval);


//Mutant 2:
/* Is there a state trace where Q holds in at most k t.u.?  */
_TA_tb_2=TimeBounded_Response(interval_tbr);


//Mutant 3:
/* Can P and Q hold at the same time? */
_TA_tb_3=TA_tb_3();

//Mutant 4:
/* Does Q ever hold? */
const int max_integer=32767;
_TA_tb_4=TA_tb_4(max_integer);

//=====================================================================================================

/* Time-Restricted Precedence: */

const int interval_trp = 10;
_TR_Precedence = TimeRestricted_Precedence(interval_trp);

//Mutant 1:
/* Q hold but later? */
const int tr_delay=5;
_TA_trp_1 = TimeRestricted_Precedence(interval_trp+tr_delay);

//Mutant 2:
/* Q holds but, has P ever held before? */
_TA_trp_2 = TA_trp_2(interval_trp);

//=====================================================================================================

/*Conditional Security */

const int interval_cs = 9;
_Conditional_Security = Conditional_Security(interval_cs);

//Mutant 1:
/* Does Q hold for a shorter interval? */
_TA_cs_1 = Conditional_Security(interval_cs-3);

//Mutant 2:
/*Is it the case that Q and ~Q alternate n times within the interval (sttutering)?
    Q
    P                      k    
    |----------------------|-------------
     QQQQ¬Q¬QQQ¬QQ¬QQQQ.....
*/
_TA_cs_2 = TA_cs_2(interval_cs+11);

//Mutant 3:
/* Is there any trace where Q ceases to hold and from inf on (with inf &lt; k) ¬Q holds until the end of the interval?  
  P y Q         inf         k    
    |------------|----------|-------------
     QQQQQQQQQ¬Q¬Q¬Q¬Q¬Q¬Q¬Q¬Q...
*/
_TA_cs_3 = TA_cs_3(85,9);

//Mutant 4:
/*Is there a trace where P and ¬Q hold at the beginning, then ¬Q holds for a period of time, and from inf (with inf &lt; k) Q holds until the end of the interval? 
In other words, Q starts holding late within the interval.
   ¬Q
    P        inf            k    
    |---------|-------------|-------------
    ¬QQQQQQQQQQQQQQQQQ...
*/
_TA_cs_4 = TA_cs_4(80,3);

//=====================================================================================================

/* Time-Bounded Frecuency */

const int interval_tbf = 15;
_TimeBounded_Frequency = TimeBounded_Frequency(interval_tbf);

//Mutant 1:
/* Does P hold frequently within an interval greater than k? */
_TA_tbf_1 = TimeBounded_Frequency(interval_tbf+2);

//Mutant 2:
/* Is there any trace where P holds frequently at least n times? */ 
_TA_tbf_2 = TimeBounded_Frequency(interval_tbf);
/* Verify with:: E&lt;&gt; _TA_tbf_2.cont&gt;n */

//Mutant 3:
/* Is it the case that P always holds frequently at least n times? */
_TA_tbf_3 = TimeBounded_Frequency(interval_tbf);
/* Verify with:: A[] _TA_tbf_3.Error imply _TA_tbf_3.cont&gt;n */


//===============================================================================================
/* MORE QPT PATTERNS */

/* Precedence with Delay */
const int interval_pwd = 10;
_Precedence_with_Delay = Precedence_with_Delay(interval_pwd);

/* Time-Constant Frequency */
const int interval_tcf = 10;
_TimeConstant_Frequency = TimeConstant_Frequency(interval_tcf);

/* Time-Restricted Disable */
const int interval_trd = 8;
_TimeRestricted_Disable = TimeRestricted_Disable(interval_trd);

/* Time-Bounded Security */
const int interval_tbs = 8;
_TimeBounded_Security = TimeBounded_Security(interval_tbs);


//=====================================================================================================

//System Declaration

/* Time-Bounded Response: */

system Train, Gate, Alarm, Urgent_Channel, _TB_Response;

/*Mutants:*/
//system Train, Gate, Alarm, Urgent_Channel, _TA_tb_1;
//system Train, Gate, Alarm, Urgent_Channel, _TA_tb_2;
//system Train, Gate, Alarm, Urgent_Channel, _TA_tb_3;
//system Train, Gate, Alarm, Urgent_Channel,_TA_tb_4;



/* Time-Restricted Precedence: */

//system Train, Gate, Alarm, Urgent_Channel, _TR_Precedence;

//Mutants:
//system Train, Gate, Alarm, Urgent_Channel,_TA_trp_1;
//system Train, Gate, Alarm, Urgent_Channel,_TA_trp_2;



/* Conditional security */

//system Train, Gate, Alarm, Urgent_Channel, _Conditional_Security;

//Mutants:
//system Train, Gate, Alarm, Urgent_Channel, _TA_cs_1;
//system Train, Gate, Alarm, Urgent_Channel, _TA_cs_2;
//system Train, Gate, Alarm, Urgent_Channel, _TA_cs_3;
//system Train, Gate, Alarm, Urgent_Channel, _TA_cs_4;
</system>
	<queries>
		<option key="--diagnostic" value="2"/>
		<query>
			<formula>--------------------------------------------------------------------------</formula>
			<comment/>
		</query>
		<query>
			<formula>A[] not _TB_Response.Error</formula>
			<comment/>
			<option key="--diagnostic" value="0"/>
			<result outcome="failure" type="quality" timestamp="2024-09-24 14:49:49 -0300">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; _TB_Response.Error</formula>
			<comment/>
			<result outcome="failure" type="quality" timestamp="2024-09-17 15:22:12 -0300">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>A[] not _TA_tb_1.Error</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-09-24 14:50:40 -0300">
				<option key="--diagnostic" value="-1"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>E&lt;&gt; _TA_tb_2.B</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-09-24 14:51:03 -0300">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>E&lt;&gt; _TA_tb_3.Error</formula>
			<comment/>
			<result outcome="failure" type="quality" timestamp="2024-09-24 14:51:54 -0300">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>A[] not _TA_tb_4.Error</formula>
			<comment/>
			<result outcome="failure" type="quality" timestamp="2024-09-24 14:52:28 -0300">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>-----------------------------------------------------------------------------</formula>
			<comment/>
		</query>
		<query>
			<formula>A[] not _TR_Precedence.Error</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-09-24 14:53:51 -0300">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>A[] not _TA_trp_1.Error</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-09-24 14:54:43 -0300">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>A[] not _TA_trp_2.Error</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-09-24 14:56:16 -0300">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>---------------------------------------------------------------------------</formula>
			<comment/>
		</query>
		<query>
			<formula>A[] not _Conditional_Security.Error</formula>
			<comment>Propiedad Conditional Security. Si se activa la alarma durante x unidades de tiempo no se permite la entrada de trenes.</comment>
			<option key="--diagnostic" value="0"/>
			<result outcome="failure" type="quality" timestamp="2024-09-24 14:57:06 -0300">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>A[] not _TA_cs_1.Error</formula>
			<comment>Mutante 1 de Cond_security: verifica si Q() se mantiene por menos tiempo (levemente menos)</comment>
			<result outcome="success" type="quality" timestamp="2024-09-24 14:58:47 -0300">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>E&lt;&gt; _TA_cs_2.cont&gt;1</formula>
			<comment>Verifica si Q deja y vuelve a ocurrir n veces dentro del intervalo de tiempo.</comment>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>E&lt;&gt;  _TA_cs_3.D</formula>
			<comment>Verifica si existe alguna traza en donde Q deja de ocurrir y a partir de ahi se mantiene not Q() por todo el intervalo.</comment>
			<result outcome="success" type="quality" timestamp="2024-09-24 15:02:03 -0300">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; _TA_cs_4.D</formula>
			<comment>Verificar si existe una traza en donde P y not Q valen al inicio, se mantiene not Q() por un lapso de tiempo menor a k y luego se mantiene Q hasta k.
En decir, Q comienza a ocurre tarde dentro del intervalo.</comment>
			<result outcome="success" type="quality" timestamp="2024-09-24 15:02:30 -0300">
				<option key="--diagnostic" value="0"/>
			</result>
		</query>
		<query>
			<formula>----------------------------------------------------------------------------</formula>
			<comment/>
		</query>
		<query>
			<formula>A[] not _TimeBounded_Frequency.Error</formula>
			<comment/>
		</query>
		<query>
			<formula>E&lt;&gt; _TimeBounded_Frequency.Error</formula>
			<comment/>
		</query>
		<query>
			<formula>A[] not _TA_tbf_1.Error</formula>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>E&lt;&gt; _TA_tbf_2.cont&gt;2</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-09-24 17:42:38 -0300">
				<option key="--search-order" value="0"/>
				<option key="--statespace-consumption" value="2"/>
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula>A[] _TA_tbf_3.Error imply _TA_tbf_3.cont&gt;0</formula>
			<comment/>
		</query>
	</queries>
</nta>
